import React, { useState, useEffect } from 'react';
import '../styles/explanations/ManintheMiddle.css';
import Navbar from '../Navbar';
import axios from 'axios';
import MCQ from '../practiceComponents/MCQ'
const Zde = () => {
  const [completedSections, setCompletedSections] = useState([false, false, false, false, false, false]);
  const [currentSection, setCurrentSection] = useState(0);
  const [id, setId] = useState(null);
  const attack_id = 5;

  const [showMCQ, setShowMCQ] = useState(false); 
  const [quizSubmitted, setQuizSubmitted] = useState(false);


  useEffect(() => {
    axios.get('http://localhost:8800')
      .then(res => {
        if (res.data.valid) {
          setId(res.data.id);
        }
      })
      .catch(err => console.log(err));
  }, []);

  useEffect(() => {
    if (id) {
      axios.get(`http://localhost:8800/api/user_progress`, {
        params: {
          id,
          attack_id
        }
      }).then(response => {
        setCompletedSections([
          response.data.introduction,
          response.data.works,
          response.data.types,
          response.data.prevention,
          response.data.quiz,
          response.data.conclusion
        ]);

        // Set current section to the first uncompleted section
        const firstUncompletedSection = response.data.findIndex(completed => !completed);
        setCurrentSection(firstUncompletedSection !== -1 ? firstUncompletedSection : 0);
      })
        .catch(err => console.error('Error fetching progress:', err));
    }
  }, [id, attack_id]);

  const handleCompleteSection = (index) => {
    const newCompletedSections = [...completedSections];
    newCompletedSections[index] = true;
    setCompletedSections(newCompletedSections);

    axios.post(`http://localhost:8800/api/updateProgress`, {
      id,
      attack_id,
      section: index,
      completed: true
    })
      .then(() => {
        console.log('Progress updated successfully');

        // Move to the next section or stay on the current one if it's the last section
        setCurrentSection(index + 1 < newCompletedSections.length ? index + 1 : index);
      })
      .catch(err => console.error('Error updating progress:', err));
  };

  const handleNodeClick = (index) => {
    if (completedSections[index] || index === currentSection) {
      setCurrentSection(index);
    } else {
      // Navigate to the first uncompleted section
      const firstUncompletedSection = completedSections.findIndex(completed => !completed);
      setCurrentSection(firstUncompletedSection !== -1 ? firstUncompletedSection : currentSection);
    }
  };
  const handleQuizSubmit = () => {
    setQuizSubmitted(true);
  };
  
  return (
    <>
      <Navbar />
      <div className="progress-bar-container">
        {completedSections.map((isCompleted, index) => (
          <div
            key={index}
            className={`progress-node ${isCompleted ? 'completed' : ''} ${currentSection === index ? 'current' : ''}`}
            onClick={() => handleNodeClick(index)}
          >
            {index + 1}
          </div>
        ))}
      </div>

      <div className="mitm-container">
        <h1>Zero-Day Exploit</h1>
        {currentSection === 0 && (
          <section>
            <h2>1. Introduction</h2>
            <p>
              A Zero-Day Exploit is a type of cyber attack that targets a vulnerability in software or hardware that is unknown to the vendor or developer. These vulnerabilities are called "zero-day" because they are exploited before the vendor has had a chance to address and patch them.
            </p>
            <button
              className="done-button"
              onClick={() => handleCompleteSection(0)}
              disabled={completedSections[0]}
            >
              {completedSections[0] ? 'Done' : 'Mark as Done'}
            </button>
          </section>
        )}
        {currentSection === 1 && (
          <section>
            <h2>2. How Zero-Day Exploit Work</h2>
            <p>
              Zero-Day Exploits typically follow these steps:
            </p>
            <ol>
              <li><strong>Discovery:</strong> The attacker discovers a security vulnerability in software or hardware.</li>
              <li><strong>Exploitation:</strong> The attacker develops or uses an exploit to take advantage of the vulnerability.</li>
              <li><strong>Deployment:</strong> The attacker deploys the exploit to achieve malicious objectives, such as gaining unauthorized access or stealing data.</li>
              <li><strong>Detection:</strong> The vulnerability remains undetected by the vendor and the public until a fix is developed and released.</li>
            </ol>
            <button
              className="done-button"
              onClick={() => handleCompleteSection(1)}
              disabled={completedSections[1] || !completedSections[0]}
            >
              {completedSections[1] ? 'Done' : 'Mark as Done'}
            </button>
          </section>
        )}
        {currentSection === 2 && (
          <section>
            <h2>3. Types of Zero-Day Exploitss</h2>
            <p>
            Zero-Day Exploits can be categorized into several types:
            </p>
            <ul>
              <li><strong>Software Vulnerabilities:</strong> Exploits that target flaws in software applications or operating systems.</li>
              <li><strong>Hardware Vulnerabilities:</strong> Exploits that target flaws in physical hardware components.</li>
              <li><strong>Web Application Vulnerabilities:</strong> Exploits that target weaknesses in web applications, such as Cross-Site Scripting (XSS) or SQL Injection.</li>
              <li><strong>Firmware Vulnerabilities:</strong> Exploits that target flaws in the firmware of devices such as routers or IoT devices.</li>
            </ul>
            <button
              className="done-button"
              onClick={() => handleCompleteSection(2)}
              disabled={completedSections[2] || !completedSections[1]}
            >
              {completedSections[2] ? 'Done' : 'Mark as Done'}
            </button>
          </section>
        )}
        {currentSection === 3 && (
          <section>
            <h2>4. Prevention Techniques</h2>
            <p>
              To protect against Zero-Day Exploits, consider implementing the following measures:
            </p>
            <ul>
              <li><strong>Regular Updates:</strong> Ensure that all software, firmware, and hardware components are updated regularly to patch known vulnerabilities.</li>
              <li><strong>Vulnerability Scanning:</strong> Use vulnerability scanning tools to identify and address potential security issues.</li>
              <li><strong>Intrusion Detection Systems:</strong> Implement intrusion detection systems to monitor and alert on suspicious activities.</li>
              <li><strong>Security Best Practices:</strong> Follow security best practices, such as least privilege access and network segmentation, to reduce the impact of potential exploits.</li>
            </ul>
            <button
              className="done-button"
              onClick={() => handleCompleteSection(3)}
              disabled={completedSections[3] || !completedSections[2]}
            >
              {completedSections[3] ? 'Done' : 'Mark as Done'}
            </button>
          </section>
        )}
        {currentSection === 4 && (
          <section>
            <h2>5. Quiz</h2>
            {!showMCQ ? (
              <button onClick={() => setShowMCQ(true)} className='start-quiz'>Start Quiz</button>
            ) : (
              <MCQ attack_id={attack_id} showNav={false} onQuizSubmit={handleQuizSubmit} />
            )}
            <button
              className="done-button"
              onClick={() => handleCompleteSection(4)}
              disabled={completedSections[4] || !completedSections[3] || !quizSubmitted}
            >
              {completedSections[4] ? 'Done' : 'Mark as Done'}
            </button>
          </section>
        )}

        {currentSection === 5 && (
          <section>
            <h2>6. Conclusion</h2>
            <p>
            Zero-Day Exploits are serious threats that can lead to significant security breaches. By staying informed about vulnerabilities and implementing preventive measures, individuals and organizations can better protect themselves against these sophisticated attacks.
            </p>
            <button
              className="done-button"
              onClick={() => handleCompleteSection(5)}
              disabled={completedSections[5] || !completedSections[4]}
            >
              {completedSections[5] ? 'Done' : 'Mark as Done'}
            </button>
          </section>
        )}
      </div>
    </>
  );
}

export default Zde;

